// Timeline JavaScript Functions - timeline-functions.js

// Toggle scientific mode
function toggleMode() {
    const toggle = document.querySelector('.toggle-switch');
    const body = document.body;
    
    toggle.classList.toggle('active');
    body.classList.toggle('show-scientific');
}

// Period switching with dynamic content loading
function showPeriod(periodId) {
    // Hide all periods
    document.querySelectorAll('.timeline-period').forEach(period => {
        period.classList.remove('active');
    });
    
    // Remove active from all tabs
    document.querySelectorAll('.period-tab').forEach(tab => {
        tab.classList.remove('active');
    });
    
    // Show selected period
    const targetPeriod = document.getElementById(periodId);
    if (targetPeriod) {
        targetPeriod.classList.add('active');
    }
    
    // Activate clicked tab
    event.target.classList.add('active');
    
    // Scroll to timeline section
    document.querySelector('.timeline-section').scrollIntoView({ 
        behavior: 'smooth',
        block: 'start'
    });

    // Load period content if not already loaded
    loadPeriodContent(periodId);
}

// Dynamic content loading for periods
async function loadPeriodContent(periodId) {
    const contentContainer = document.getElementById('timeline-content');
    
    try {
        const response = await fetch(`periods/${periodId}.html`);
        if (response.ok) {
            const content = await response.text();
            contentContainer.innerHTML = content;
        }
    } catch (error) {
        console.log('Loading static content for:', periodId);
        // Fallback to static content if dynamic loading fails
    }
}

// Enhanced card interactions
function initializeCardInteractions() {
    const cards = document.querySelectorAll('.population-card');
    
    cards.forEach(card => {
        card.addEventListener('mouseenter', function() {
            // Add subtle highlight effect
            this.style.transform = 'translateY(-8px)';
            
            // Highlight related timeline marker if exists
            const period = this.closest('.timeline-period');
            if (period) {
                highlightTimelineMarker(period.id);
            }
        });
        
        card.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(-5px)';
            
            // Remove timeline marker highlight
            removeTimelineMarkerHighlight();
        });

        // Click to expand scientific content
        card.addEventListener('click', function() {
            const scientificContent = this.querySelector('.scientific-content');
            if (scientificContent) {
                scientificContent.style.display = 
                    scientificContent.style.display === 'block' ? 'none' : 'block';
            }
        });
    });
}

// Timeline marker highlighting
function highlightTimelineMarker(periodId) {
    const markerMap = {
        'paleolithic': 0,
        'neolithic': 1,
        'bronze-age': 2,
        'iron-age': 3,
        'historical': 4
    };
    
    const markerIndex = markerMap[periodId];
    if (markerIndex !== undefined) {
        const markers = document.querySelectorAll('.timeline-markers .marker');
        if (markers[markerIndex]) {
            markers[markerIndex].style.transform = 'translateY(-50%) scale(1.2)';
            markers[markerIndex].style.textShadow = '0 0 10px rgba(255,255,255,0.8)';
        }
    }
}

function removeTimelineMarkerHighlight() {
    const markers = document.querySelectorAll('.timeline-markers .marker');
    markers.forEach(marker => {
        marker.style.transform = 'translateY(-50%) scale(1)';
        marker.style.textShadow = '0 2px 4px rgba(0,0,0,0.3)';
    });
}

// Smooth scrolling for better UX
function initializeSmoothScrolling() {
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });
}

// Image lazy loading and error handling
function initializeImageHandling() {
    // Lazy loading for images with data-src
    const images = document.querySelectorAll('img[data-src]');
    
    if ('IntersectionObserver' in window) {
        const imageObserver = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const img = entry.target;
                    img.src = img.dataset.src;
                    img.classList.remove('img-placeholder');
                    observer.unobserve(img);
                }
            });
        });
        
        images.forEach(img => imageObserver.observe(img));
    } else {
        // Fallback for browsers without IntersectionObserver
        images.forEach(img => {
            img.src = img.dataset.src;
        });
    }

    // Error handling for all images
    document.querySelectorAll('img').forEach(img => {
        img.addEventListener('error', function() {
            this.style.display = 'none';
            console.log('Image failed to load:', this.src);
            
            // Show fallback content if available
            const fallback = this.parentElement.querySelector('.image-fallback');
            if (fallback) {
                fallback.style.display = 'block';
            }
        });
    });
}

// Animation utilities
function animateOnScroll() {
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('animate-in');
            }
        });
    }, observerOptions);
    
    // Observe population cards for animation
    document.querySelectorAll('.population-card').forEach(card => {
        observer.observe(card);
    });
}

// Initialize all functionality when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    // Initialize all interactive features
    initializeCardInteractions();
    initializeSmoothScrolling();
    initializeImageHandling();
    animateOnScroll();
    
    // Load default period content
    loadPeriodContent('paleolithic');
    
    // Add animation class to CSS if not present
    if (!document.querySelector('style[data-animation]')) {
        const style = document.createElement('style');
        style.setAttribute('data-animation', 'true');
        style.textContent = `
            .population-card {
                opacity: 0;
                transform: translateY(30px);
                transition: opacity 0.6s ease, transform 0.6s ease;
            }
            .population-card.animate-in {
                opacity: 1;
                transform: translateY(0);
            }
            .img-placeholder {
                background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
                background-size: 200% 100%;
                animation: loading 1.5s infinite;
            }
            @keyframes loading {
                0% { background-position: 200% 0; }
                100% { background-position: -200% 0; }
            }
        `;
        document.head.appendChild(style);
    }
});

// Export functions for external use
window.TimelineFunctions = {
    toggleMode,
    showPeriod,
    loadPeriodContent,
    highlightTimelineMarker,
    removeTimelineMarkerHighlight
};